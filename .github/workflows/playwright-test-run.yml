name: Playwright Test Runner

on:
  workflow_dispatch:
    inputs:
      run_branch:
        description: "Test project branch"
        type: string
        required: false
        default: "main"
      application:
        description: "Application"
        type: choice
        required: true
        options:
          - neevadmin
          - compass
          - neevadmin-compass-integration
        default: neevadmin
      test_scope:
        description: "Test scope"
        type: choice
        required: true
        options:
          - regression
          - smoke
        default: regression
      test_type:
        description: "Test type"
        type: choice
        required: true
        options:
          - UI
          - API
          - ALL
        default: ALL
      env:
        description: "Environment"
        type: choice
        required: true
        options:
          - uat
          - dev
          - test-automation-1
        default: uat
      browser:
        description: "Browser"
        type: choice
        required: true
        options:
          - chrome
          - edge
          - firefox
          - safari
          - mobile-Chrome-Pixel-7
          - mobile-Safari-iPhone-15
        default: chrome
      include_tags:
        description: "Include tags (comma separated, e.g. @new,@positive)"
        type: string
        required: false
        default: ""
      exclude_tags:
        description: "Exclude tags (comma separated, e.g. @old,@negative)"
        type: string
        required: false
        default: ""
      ignore_skip:
        description: "Ignore @skip:* tags (run all tests)"
        required: false
        type: boolean
        default: false
  workflow_call:
    inputs:
      application:
        required: true
        type: string
      test_scope:
        required: true
        type: string
      test_type:
        required: true
        type: string
      env:
        required: true
        type: string
      run_branch:
        required: true
        type: string
      browser:
        required: true
        type: string
      trigger_url:
        required: false
        type: string
      include_tags:
        required: false
        type: string
      exclude_tags:
        required: false
        type: string
      ignore_skip:
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  pages: write
  id-token: write


  
jobs:
  run-and-publish:
    name: Playwright Test Run
    runs-on: ubuntu-latest
    outputs:
      test_scope: ${{ env.TEST_SCOPE }}
      application: ${{ env.APPLICATION }}
      env: ${{ env.ENV }}
      run_number: ${{ env.UNIQUE_RUN_ID }}
      test_status: ${{ steps.run_tests.outputs.test_status }}
      report_timestamp: ${{ env.REPORT_TIMESTAMP }}

    env:
      APPLICATION: ${{ inputs.application || github.event.inputs.application }}
      TEST_SCOPE: ${{ inputs.test_scope || github.event.inputs.test_scope }}
      TEST_TYPE: ${{ inputs.test_type || github.event.inputs.test_type }}
      ENV: ${{ inputs.env || github.event.inputs.env }}
      RUN_BRANCH: ${{ inputs.run_branch || github.event.inputs.run_branch }}
      BROWSER: ${{ inputs.browser || github.event.inputs.browser }}
      TRIGGER_URL: ${{ inputs.trigger_url || github.event.inputs.trigger_url }}
      INCLUDE_TAGS: ${{ inputs.include_tags || github.event.inputs.include_tags || '' }}
      EXCLUDE_TAGS: ${{ inputs.exclude_tags || github.event.inputs.exclude_tags || '' }}
      IGNORE_SKIP: ${{ inputs.ignore_skip || github.event.inputs.ignore_skip || 'false' }}
      GITHUB_RUN_ID: ${{ github.run_id }}
      GITHUB_ACTOR: ${{ github.actor }}
      GITHUB_EVENT_NAME: ${{ github.event_name }}
      UNIQUE_RUN_ID: ${{ github.run_number || github.run_id }}
      CURRENT_REPO: ${{ github.repository }}
      DISPATCH_ID: ${{ github.event.client_payload.dispatch_id || 'none' }}
      TEST_REPO: playwrightDemoProject

    steps:
      - name: Checkout test repo (always playwrightDemoProject)
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/${{ env.TEST_REPO }}
          ref: ${{ env.RUN_BRANCH }}
          fetch-depth: 0
          persist-credentials: true

      - name: Rename current run with dispatch ID
        if: env.DISPATCH_ID != 'none'
        run: |
          echo "Renaming current run with DISPATCH_ID=${{ env.DISPATCH_ID }}"
          RUN_ID=$(gh run list --workflow="Playwright Test Runner" --limit 10 --json databaseId,headBranch,event | jq -r 'map(select(.event=="repository_dispatch" and .headBranch=="${{ env.RUN_BRANCH }}")) | sort_by(.databaseId) | reverse | .[0].databaseId')
          echo "Resolved RUN_ID: $RUN_ID"
          if [ -n "$RUN_ID" ] && [ "$RUN_ID" != "null" ]; then
            curl -X PATCH \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ env.CURRENT_REPO }}/actions/runs/$RUN_ID" \
              -d "{\"name\":\"Playwright Test Runner (${{ env.DISPATCH_ID }})\"}"
          else
            echo "‚ö†Ô∏è Could not resolve run ID for renaming"
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install dependencies and Playwright
        run: |
          sudo apt-get install fonts-liberation fonts-dejavu fonts-noto fonts-roboto
          npm ci
          npx playwright install
          npx playwright install-deps
          npx playwright install msedge
          curl -sfS https://dotenvx.sh/install.sh | sh

      - name: Build Playwright grep expression
        id: build_grep
        run: |
          INCLUDE=()
          [ -n "${{ env.APPLICATION }}" ] && INCLUDE+=("@${{ env.APPLICATION }}")
          [ -n "${{ env.TEST_SCOPE }}" ] && INCLUDE+=("@${{ env.TEST_SCOPE }}")
          if [ "${{ env.TEST_TYPE }}" != "ALL" ]; then
            INCLUDE+=("@${{ env.TEST_TYPE }}")
          fi

          if [ -n "${{ env.INCLUDE_TAGS }}" ]; then
            IFS=',' read -ra TAGS <<< "${{ env.INCLUDE_TAGS }}"
            for tag in "${TAGS[@]}"; do
              tag=$(echo "$tag" | xargs) # trim
              [ -n "$tag" ] && INCLUDE+=("$tag")
            done
          fi

          INCLUDE_REGEX=""
          for tag in "${INCLUDE[@]}"; do
            INCLUDE_REGEX="${INCLUDE_REGEX}(?=.*(?:^|[\s,])${tag}(?:$|[\s,]))"
          done

          EXCLUDE_TAGS="${{ env.EXCLUDE_TAGS }}"
          if [ "${{ env.IGNORE_SKIP }}" != "true" ]; then
            if [ -n "$EXCLUDE_TAGS" ]; then
              EXCLUDE_TAGS="$EXCLUDE_TAGS,@skip:"
            else
              EXCLUDE_TAGS="@skip:"
            fi
          fi

          EXCLUDE_REGEX=""
          if [ -n "$EXCLUDE_TAGS" ]; then
            IFS=',' read -ra TAGS <<< "$EXCLUDE_TAGS"
            for tag in "${TAGS[@]}"; do
              tag=$(echo "$tag" | xargs)
              if [ "$tag" = "@skip:" ]; then
                # Match any tag starting with @skip:
                EXCLUDE_REGEX="$EXCLUDE_REGEX|@skip:[^ ,]*"
              elif [ -n "$tag" ]; then
                EXCLUDE_REGEX="$EXCLUDE_REGEX|(?=.*(?:^|[\\s,])$tag(?:$|[\\s,]))"
              fi
            done
          fi
          EXCLUDE_REGEX="${EXCLUDE_REGEX#|}"

          echo "include_regex=$INCLUDE_REGEX" >> $GITHUB_OUTPUT
          echo "exclude_regex=$EXCLUDE_REGEX" >> $GITHUB_OUTPUT

      - name: Run Playwright Tests
        id: run_tests
        env:
          env: ${{ env.ENV }}
        continue-on-error: true
        run: |
          INCLUDE_REGEX="${{ steps.build_grep.outputs.include_regex }}"
          EXCLUDE_REGEX="${{ steps.build_grep.outputs.exclude_regex }}"
          BROWSER="${{ env.BROWSER }}"

          CMD="npx dotenvx run -- npx playwright test"
          [ -n "$INCLUDE_REGEX" ] && CMD="$CMD --grep '$INCLUDE_REGEX'"
          [ -n "$EXCLUDE_REGEX" ] && CMD="$CMD --grep-invert '$EXCLUDE_REGEX'"
          [ -n "$BROWSER" ] && CMD="$CMD --project=$BROWSER"

          echo "Running: $CMD"
          if eval $CMD; then
            echo "test_status=success" >> $GITHUB_OUTPUT
          else
            echo "test_status=failure" >> $GITHUB_OUTPUT
          fi

      - name: Set report timestamp
        id: set_report_timestamp
        run: echo "REPORT_TIMESTAMP=$(date -u +'%Y-%m-%d-%H:%M:%S')" >> $GITHUB_ENV

      - name: Execution Context Summary
        run: |
          echo "### üîç Trigger Context" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Parameter | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Application | \`$APPLICATION\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Test scope | \`$TEST_SCOPE\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Test type | \`$TEST_TYPE\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | \`$ENV\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Include tags | \`$INCLUDE_TAGS\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Exclude tags | \`$EXCLUDE_TAGS\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Run tests with skip tags | \`$IGNORE_SKIP\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Browser | \`$BROWSER\` |" >> $GITHUB_STEP_SUMMARY
          if [ -n "$TRIGGER_URL" ]; then
            echo "| Triggered From | [View Origin]($TRIGGER_URL) |" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Notify Slack with test summary
        continue-on-error: true
        if: always()
        run: |
          MESSAGE="*Test Summary*\n"
          MESSAGE+="*Application:* \`$APPLICATION\`\n"
          MESSAGE+="*Environment:* \`$ENV\`\n"
          MESSAGE+="*Test Scope:* \`$TEST_SCOPE\`\n"
          MESSAGE+="*Test Type:* \`$TEST_TYPE\`\n"
          MESSAGE+="*Browser:* \`$BROWSER\`\n"
          MESSAGE+="*Tags:* Include \`$INCLUDE_TAGS\`, Exclude \`$EXCLUDE_TAGS\`\n"
          MESSAGE+="*Run tests with skip tags:* \`$IGNORE_SKIP\`\n"
          MESSAGE+="*Triggered by:* \`$GITHUB_ACTOR\`\n"
          if [ -n "$TRIGGER_URL" ]; then
            MESSAGE+="*Triggered From:* <$TRIGGER_URL|View Origin>\n"
          fi
          MESSAGE+="*Report:* ${REPORT_URL}"

          curl -X POST \
            -H "Content-type: application/json" \
            -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
            --data "{\"channel\":\"$SLACK_CHANNEL_ID\",\"text\":\"${MESSAGE}\"}" \
            https://slack.com/api/chat.postMessage

      - name: Checkout gh-pages branch (always playwrightDemoProject)
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/${{ env.TEST_REPO }}
          ref: gh-pages
          path: gh-pages
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare Allure Report
        if: always()
        run: |
          set -e
          echo "Preparing Allure Report..."

          LATEST_RUN=$(ls -d gh-pages/${{ env.APPLICATION }}/${{ env.ENV }}/${{ env.TEST_SCOPE }}/*/ 2>/dev/null | sort -V | tail -n 1)
          echo "Latest run found: $LATEST_RUN"

          mkdir -p "gh-pages/${{ env.APPLICATION }}/${{ env.ENV }}/${{ env.TEST_SCOPE }}/${{ env.REPORT_TIMESTAMP }}"

          mkdir -p "allure-results"
          if [ -n "$LATEST_RUN" ]; then
            if [ -d "$LATEST_RUN/history" ]; then
              echo "Copying history from $LATEST_RUN"
              cp -rv "$LATEST_RUN/history" "allure-results/"
            else
              echo "No history directory found in $LATEST_RUN"
            fi
          fi

      - name: Add Allure Executor Info
        run: |
          mkdir -p allure-results
          cat <<EOF > allure-results/executor.json
          {
            "name": "GitHub Actions",
            "type": "github",
            "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
            "buildOrder": "${{ github.run_number }}",
            "buildName": "Playwright Test Run #${{ env.UNIQUE_RUN_ID }}",
            "buildUrl": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
            "reportUrl": "https://${{ github.repository_owner }}.github.io/${{ env.TEST_REPO }}/${{ env.APPLICATION }}/${{ env.ENV }}/${{ env.TEST_SCOPE }}/${{ env.REPORT_TIMESTAMP }}/",
            "executor": "GitHub Actions"
          }
          EOF

      - name: Add Allure Environment Info
        run: |
          mkdir -p allure-results
          {
            echo "Latest_Report: https://${{ github.repository_owner }}.github.io/${{ env.TEST_REPO }}/${{ env.APPLICATION }}/${{ env.ENV }}/${{ env.TEST_SCOPE }}/latest/"
            echo "Application: $APPLICATION"
            echo "Test_Scope: $TEST_SCOPE"
            echo "Test_Type: $TEST_TYPE"
            echo "Environment: $ENV"
            echo "Browser: $BROWSER"
            echo "Include_Tags: $INCLUDE_TAGS"
            echo "Exclude_Tags: $EXCLUDE_TAGS"
            echo "Ignore_Skip: $IGNORE_SKIP"
            echo "Run_Branch: $RUN_BRANCH"
            echo "GitHub_Run_ID: $GITHUB_RUN_ID"
            echo "GitHub_Actor: $GITHUB_ACTOR"
            echo "GitHub_Event: $GITHUB_EVENT_NAME"
            if [ -n "$TRIGGER_URL" ]; then
              echo "Triggered_From: $TRIGGER_URL"
            fi
            echo "Reports_Repository: https://${{ github.repository_owner }}.github.io/${{ env.TEST_REPO }}/"
          } > allure-results/environment.properties

      - name: Generate Allure report
        run: |
          REPORT_NAME="${{ env.APPLICATION }}-[${{ env.ENV }}-${{ env.TEST_SCOPE }}]-${{ env.UNIQUE_RUN_ID }}"
          echo "Report name will be: $REPORT_NAME"
          npm run allure:generate -- \
            --report-name "$REPORT_NAME" \
            --output "gh-pages/${{ env.APPLICATION }}/${{ env.ENV }}/${{ env.TEST_SCOPE }}/${{ env.REPORT_TIMESTAMP }}" || {
            echo "Failed to generate Allure report"
            exit 1
          }
          echo "Allure report generated successfully"

      - name: Set up git credentials
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository_owner }}/${{ env.TEST_REPO }}.git

      - name: Commit and Push Allure Report
        if: always()
        run: |
          set -e
          cd gh-pages

          update_latest() {
            local path=$1
            echo "Updating latest report content for $path"

            local latest_run_dir="${{ env.REPORT_TIMESTAMP }}"
            local source_dir="$path/$latest_run_dir"
            local target_dir="$path/latest"

            if [ ! -d "$source_dir" ]; then
              echo "Source directory $source_dir does not exist. Skipping."
              return 0
            fi

            rm -rf "$target_dir" || true
            mkdir -p "$target_dir"
            shopt -s nullglob
            files=("$source_dir/"*)
            if [ ${#files[@]} -gt 0 ]; then
              cp -a "$source_dir/"* "$target_dir/"
              echo "Updated $path/latest from $source_dir"
            else
              echo "No files to copy from $source_dir"
            fi
            shopt -u nullglob
          }

          generate_history_index() {
            # No-op: history.md generation removed as per user request
            return 0
          }

      - name: Update latest folder
        run: |
          set -e
          cd gh-pages
          path="${{ env.APPLICATION }}/${{ env.ENV }}/${{ env.TEST_SCOPE }}"
          latest_run_dir="${{ env.REPORT_TIMESTAMP }}"
          source_dir="$path/$latest_run_dir"
          target_dir="$path/latest"

          if [ ! -d "$source_dir" ]; then
            echo "Source directory $source_dir does not exist. Skipping."
            exit 0
          fi

          rm -rf "$target_dir" || true
          mkdir -p "$target_dir"
          shopt -s nullglob
          files=("$source_dir/"*)
          if [ ${#files[@]} -gt 0 ]; then
            cp -a "$source_dir/"* "$target_dir/"
            echo "Updated $path/latest from $source_dir"
          else
            echo "No files to copy from $source_dir"
          fi
          shopt -u nullglob

            git add .
            git commit -m "Update Allure Report for ${{ env.APPLICATION }} ${{ env.ENV }} ${{ env.TEST_SCOPE }} #${{ env.UNIQUE_RUN_ID }}" || echo "Nothing to commit"
            git pull --rebase origin gh-pages || true
            git push origin gh-pages

      - name: Cleanup old reports (keep 30 + latest)
        run: |
          set -e
          cd gh-pages
          for path in $(find . -type d -mindepth 3 -maxdepth 3); do
            cd "$path"
            runs=($(ls -d */ 2>/dev/null | grep -v '^latest/$' | sed 's:/$::' | sort))
            if [ ${#runs[@]} -gt 30 ]; then
              to_delete=("${runs[@]:0:${#runs[@]}-30}")
              for old in "${to_delete[@]}"; do
                echo "Deleting old report folder: $path/$old"
                rm -rf "$old"
              done
            fi
            cd - > /dev/null
          done

          git add -A
          if ! git diff --cached --quiet; then
            git commit -m "Cleanup old reports: keep latest 30"
            git push origin gh-pages
          else
            echo "No changes to commit ‚Äî skipping commit and push."
          fi

      - name: Fail job if tests failed
        if: steps.run_tests.outputs.test_status == 'failure'
        run: |
          echo "Tests failed, marking job as failed"
          exit 1

      - name: Patch Allure Report Title
        run: |
          SUMMARY_FILE="gh-pages/${{ env.APPLICATION }}/${{ env.ENV }}/${{ env.TEST_SCOPE }}/${{ env.UNIQUE_RUN_ID }}/widgets/summary.json"
          TITLE="Playwright Test Run [${{ env.APPLICATION }} | ${{ env.ENV }} | ${{ env.TEST_SCOPE }}] #${{ env.UNIQUE_RUN_ID }}"
          if [ -f "$SUMMARY_FILE" ]; then
            jq --arg title "$TITLE" '.reportName = $title' "$SUMMARY_FILE" > tmp.$$.json && mv tmp.$$.json "$SUMMARY_FILE"
          fi

  deploy:
    name: Deploy Allure Report to GitHub Pages
    runs-on: ubuntu-latest
    needs: run-and-publish
    if: ${{ always() }}

    concurrency:
      group: github-pages-deployment
      cancel-in-progress: false

    permissions:
      contents: write
      pages: write
      id-token: write

    env:
      APPLICATION: ${{ needs.run-and-publish.outputs.application }}
      ENV: ${{ needs.run-and-publish.outputs.env || 'uat' }}
      TEST_SCOPE: ${{ needs.run-and-publish.outputs.test_scope }}
      UNIQUE_RUN_ID: ${{ needs.run-and-publish.outputs.run_number }}
      GITHUB_ORG: ${{ github.repository_owner }}
      GITHUB_REPO: ${{ github.event.repository.name }}
      TEST_STATUS: ${{ needs.run-and-publish.outputs.test_status }}
      REPORT_TIMESTAMP: ${{ needs.run-and-publish.outputs.report_timestamp }}

    outputs:
      report_url: ${{ steps.set_output.outputs.report_url }}
      test_status: ${{ needs.run-and-publish.outputs.test_status }}

    steps:
      - name: Checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          repository: ${{ env.GITHUB_ORG }}/${{ env.GITHUB_REPO }}
          ref: gh-pages
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build site folder
        run: |
          mkdir -p site
          if [ -z "$(ls -A .)" ]; then
            echo "‚ö†Ô∏è gh-pages checkout is empty. The 'site' directory will be empty."
            echo "<h1>No reports found</h1><p>The gh-pages branch appears to be empty.</p>" > site/index.html
          else
            rsync -av --exclude site ./ site/
            echo "‚úÖ Contents copied to site/."

            generate_index() {
              local dir="$1"
              [ -f "$dir/index.html" ] && return
              local relpath
              if [ "$dir" = "site" ]; then
                relpath=""
              else
                relpath="${dir#site/}"
              fi
              local org="${GITHUB_ORG:-yourorg}"
              local repo="${GITHUB_REPO:-yourrepo}"
              local base_url="https://${org}.github.io/${repo}/"
              local breadcrumbs="<a href=\"${base_url}\">Allure Test Reports</a>"

              local path_accum=""
              IFS='/' read -ra parts <<< "$relpath"
              for p in "${parts[@]}"; do
                [ -n "$p" ] || continue
                path_accum="${path_accum}${p}/"
                breadcrumbs="${breadcrumbs} : <a href=\"${base_url}${path_accum}\">${p}</a>"
              done
              local title="$breadcrumbs"

              echo "<h2>${title}</h2>" > "$dir/index.html"
              echo "<ul>" >> "$dir/index.html"
              for subdir in "$dir"/*/; do
                [ -d "$subdir" ] || continue
                subname=$(basename "$subdir")
                echo "  <li><a href=\"${subname}/\">${subname}</a></li>" >> "$dir/index.html"
              done
              echo "</ul>" >> "$dir/index.html"
              echo "<p><em>Generated at $(date -u +\"%Y-%m-%dT%H:%M:%SZ\")</em></p>" >> "$dir/index.html"
            }

            export -f generate_index
            find site -type d -print0 | xargs -0 -I{} bash -c 'generate_index "$@"' _ {}

            echo "‚úÖ Hierarchical index.html files generated."
          fi

          echo "üå≤ Contents of site/ directory before upload:"
          ls -R site
          echo "---"

      - name: Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: site/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Post deployment link
        run: |
          REPORT_URL="https://${{ env.GITHUB_ORG }}.github.io/${{ env.GITHUB_REPO }}/${{ env.APPLICATION }}/${{ env.ENV }}/${{ env.TEST_SCOPE }}/${{ env.REPORT_TIMESTAMP }}/"
          echo "‚úÖ Report available at: ${REPORT_URL}"

      - name: Set output for report URL
        id: set_output
        run: |
          echo "report_url=https://${{ env.GITHUB_ORG }}.github.io/${{ env.GITHUB_REPO }}/${{ env.APPLICATION }}/${{ env.ENV }}/${{ env.TEST_SCOPE }}/${{ env.REPORT_TIMESTAMP }}/" >> $GITHUB_OUTPUT

      - name: Create deployment summary
        run: |
          REPORT_URL="https://${{ env.GITHUB_ORG }}.github.io/${{ env.GITHUB_REPO }}/${{ env.APPLICATION }}/${{ env.ENV }}/${{ env.TEST_SCOPE }}/${{ env.REPORT_TIMESTAMP }}/"
          echo "### üöÄ Allure Report Deployed!" >> $GITHUB_STEP_SUMMARY
          echo "- [View Report](${REPORT_URL})" >> $GITHUB_STEP_SUMMARY

      - name: Sleep 30 seconds
        run: sleep 30
