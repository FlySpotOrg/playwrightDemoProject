name: Playwright Test Runner

on:
  workflow_call:
    inputs:
      run_branch:
        description: "Branch to run tests on"
        required: true
        type: string
        default: "main"
      test_scope:
        description: "Test scope to run"
        required: true
        type: string
        default: "regression"
    secrets:
      ADMIN_USERNAME:
        required: true
      ADMIN_PASSWORD:
        required: true

  workflow_dispatch:
    inputs:
      test_scope:
        description: "Select test scope"
        type: choice
        required: false
        default: "regression"
        options:
          - smoke
          - regression

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  run-and-publish:
    name: Run Playwright Tests
    runs-on: ubuntu-latest
    outputs:
      test_scope: ${{ env.TEST_SCOPE }}
      run_number: ${{ env.UNIQUE_RUN_ID }}
      test_status: ${{ steps.run_tests.outputs.test_status }}

    env:
      UNIQUE_RUN_ID: ${{ github.run_id }}
      TEST_SCOPE: ${{ inputs.test_scope || github.event.client_payload.test_scope || github.event.inputs.test_scope || 'regression' }}
      CHECKOUT_REF: ${{ inputs.run_branch || github.event.client_payload.run_branch || github.event.inputs.run_branch || 'main' }}
      CURRENT_REPO: FlySpotOrg/playwrightDemoProject
      DISPATCH_ID: ${{ github.event.client_payload.dispatch_id || 'none' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: ${{ env.CURRENT_REPO }}
          fetch-depth: 0
          persist-credentials: true
          ref: ${{ env.CHECKOUT_REF }}

      - name: Rename current run with dispatch ID
        if: env.DISPATCH_ID != 'none'
        run: |
          echo "Renaming current run with DISPATCH_ID=${{ env.DISPATCH_ID }}"
          RUN_ID=$(gh run list --workflow="Playwright Test Runner" --limit 10 --json databaseId,headBranch,event | jq -r 'map(select(.event=="repository_dispatch" and .headBranch=="${{ env.CHECKOUT_REF }}")) | sort_by(.databaseId) | reverse | .[0].databaseId')
          echo "Resolved RUN_ID: $RUN_ID"
          if [ -n "$RUN_ID" ] && [ "$RUN_ID" != "null" ]; then
            curl -X PATCH \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ env.CURRENT_REPO }}/actions/runs/$RUN_ID" \
              -d "{\"name\":\"Playwright Test Runner (${{ env.DISPATCH_ID }})\"}"
          else
            echo "⚠️ Could not resolve run ID for renaming"
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install dependencies and Playwright
        run: |
          npm ci
          npx playwright install

      - name: Run Playwright Tests (${{ env.TEST_SCOPE }})
        continue-on-error: true
        id: run_tests
        env:
          ADMIN_USERNAME: ${{ secrets.ADMIN_USERNAME }}
          ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
        run: |
          if ! npm run test:${{ env.TEST_SCOPE }}; then
            echo "test_status=failure" >> $GITHUB_OUTPUT
          else
            echo "test_status=success" >> $GITHUB_OUTPUT
          fi

      - name: Checkout gh-pages branch
        if: always()
        uses: actions/checkout@v4
        with:
          repository: ${{ env.CURRENT_REPO }}
          ref: gh-pages
          path: gh-pages
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true

      - name: Prepare Allure Report
        if: always()
        run: |
          set -e
          echo "Preparing Allure Report..."

          LATEST_RUN=$(ls -d gh-pages/${{ env.TEST_SCOPE }}/*/ 2>/dev/null | sort -V | tail -n 1)
          echo "Latest run found: $LATEST_RUN"

          mkdir -p "gh-pages/${{ env.TEST_SCOPE }}/${{ env.UNIQUE_RUN_ID }}"

          mkdir -p "allure-results"
          if [ -n "$LATEST_RUN" ]; then
            if [ -d "$LATEST_RUN/history" ]; then
              echo "Copying history from $LATEST_RUN"
              cp -rv "$LATEST_RUN/history" "allure-results/"
            else
              echo "No history directory found in $LATEST_RUN"
            fi
          fi

          echo "Contents of allure-results before report generation:"
          ls -la "allure-results" || true

          cd $GITHUB_WORKSPACE
          echo "Generating Allure report..."
          npm run allure:generate -- --output "gh-pages/${{ env.TEST_SCOPE }}/${{ env.UNIQUE_RUN_ID }}" || {
            echo "Failed to generate Allure report"
            exit 1
          }
          echo "Allure report generated successfully"

      - name: Set up git credentials
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git remote set-url origin https://${{ secrets.GITHUB_TOKEN }}@github.com/FlySpotOrg/playwrightDemoProject.git

      - name: Commit and Push Allure Report
        if: always()
        run: |
          set -e
          cd gh-pages

          update_latest() {
            local scope=$1
            echo "Updating latest report content for $scope"

            local latest_run_dir="${{ env.UNIQUE_RUN_ID }}"
            local source_dir="$scope/$latest_run_dir"
            local target_dir="$scope/latest"

            if [ ! -d "$source_dir" ]; then
              echo "Source directory $source_dir does not exist. Skipping."
              return 0
            fi

            rm -rf "$target_dir" || true
            mkdir -p "$target_dir"
            cp -a "$source_dir/"* "$target_dir/"
            echo "Updated $scope/latest from $source_dir"
          }

          if [ -d "regression" ]; then
            update_latest "regression"
          fi
          if [ -d "smoke" ]; then
            update_latest "smoke"
          fi

          git add .
          git commit -m "Update Allure Report for ${{ env.TEST_SCOPE }} #${{ env.UNIQUE_RUN_ID }}" || echo "Nothing to commit"
          git pull --rebase origin gh-pages || true
          git push origin gh-pages

      - name: Fail job if tests failed
        if: steps.run_tests.outputs.test_status == 'failure'
        run: |
          echo "Tests failed, marking job as failed"
          exit 1

  deploy:
    name: Deploy Allure Report to GitHub Pages
    runs-on: ubuntu-latest
    needs: run-and-publish
    if: ${{ always() }}

    concurrency:
      group: github-pages-deployment
      cancel-in-progress: false

    permissions:
      contents: write
      pages: write
      id-token: write

    env:
      TEST_SCOPE: ${{ needs.run-and-publish.outputs.test_scope }}
      UNIQUE_RUN_ID: ${{ needs.run-and-publish.outputs.run_number }}
      CURRENT_REPO: FlySpotOrg/playwrightDemoProject
      TEST_STATUS: ${{ needs.run-and-publish.outputs.test_status }}

    outputs:
      report_url: ${{ steps.set_output.outputs.report_url }}
      test_status: ${{ needs.run-and-publish.outputs.test_status }}

    steps:
      - name: Checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          repository: ${{ env.CURRENT_REPO }}
          ref: gh-pages
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build site folder
        run: |
          mkdir -p site
          for scope in regression smoke; do
            if [ -d "$scope" ]; then
              echo "Copying $scope directory to site/"
              cp -a "$scope" site/
            else
              echo "› No $scope folder yet, skipping"
            fi
          done

      - name: Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: site/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Post deployment link
        run: |
          REPORT_URL="https://flyspotorg.github.io/playwrightDemoProject/${{ env.TEST_SCOPE }}/${{ env.UNIQUE_RUN_ID }}/"
          echo "✅ Report available at: ${REPORT_URL}"

      - name: Set output for report URL
        id: set_output
        run: |
          echo "report_url=https://flyspotorg.github.io/playwrightDemoProject/${{ env.TEST_SCOPE }}/${{ env.UNIQUE_RUN_ID }}/" >> $GITHUB_OUTPUT

      - name: Create deployment summary
        run: |
          REPORT_URL="https://flyspotorg.github.io/playwrightDemoProject/${{ env.TEST_SCOPE }}/${{ env.UNIQUE_RUN_ID }}/"
          echo "### 🚀 Allure Report Deployed!" >> $GITHUB_STEP_SUMMARY
          echo "- [View Report](${REPORT_URL})" >> $GITHUB_STEP_SUMMARY

      - name: Sleep 30 seconds
        run: sleep 30

