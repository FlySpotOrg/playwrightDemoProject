name: Playwright Test Runner

on:
  workflow_call:
    inputs:
      run_branch:
        description: "Branch to run tests on"
        required: true
        type: string
        default: "main"
      test_scope:
        description: "Test scope to run"
        required: true
        type: string
        default: "regression"
      application:
        description: "Application to run"
        required: true
        type: string
        default: "neevadmin"

  workflow_dispatch:
    inputs:
      application:
        description: "Application"
        type: choice
        required: true
        options:
          - neevadmin
          - compass
          - neevadmin-compass-integration
        default: neevadmin
      test_scope:
        description: "Test scope"
        type: choice
        required: true
        options:
          - regression
          - smoke
        default: regression
      test_type:
        description: "Test type"
        type: choice
        required: true
        options:
          - UI
          - API
          - ALL
        default: ALL
      env:
        description: "Env"
        type: choice
        required: true
        options:
          - uat
          - dev
          - test-automation-1
        default: uat
      include_tags:
        description: "Include tags (comma separated, e.g. @new,@positive)"
        type: string
        required: false
        default: ""
      exclude_tags:
        description: "Exclude tags (comma separated, e.g. @old,@negative)"
        type: string
        required: false
        default: ""

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  run-and-publish:
    name: Run Tests [${{ inputs.application }} | ${{ inputs.test_scope }}]
    runs-on: ubuntu-latest
    outputs:
      test_scope: ${{ env.TEST_SCOPE }}
      application: ${{ env.APPLICATION }}
      run_number: ${{ env.UNIQUE_RUN_ID }}
      test_status: ${{ steps.run_tests.outputs.test_status }}

    env:
      UNIQUE_RUN_ID: ${{ github.run_number || github.run_id }}
      TEST_SCOPE: ${{ inputs.test_scope || github.event.client_payload.test_scope || github.event.inputs.test_scope || 'regression' }}
      APPLICATION: ${{ inputs.application || github.event.client_payload.application || github.event.inputs.application || 'neevadmin' }}
      ENV: ${{ inputs.env || github.event.client_payload.env || github.event.inputs.env || 'uat' }}
      CHECKOUT_REF: ${{ inputs.run_branch || github.event.client_payload.run_branch || github.event.inputs.run_branch || 'main' }}
      CURRENT_REPO: ${{ github.repository }}
      DISPATCH_ID: ${{ github.event.client_payload.dispatch_id || 'none' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: ${{ env.CURRENT_REPO }}
          fetch-depth: 0
          persist-credentials: true
          ref: ${{ env.CHECKOUT_REF }}

      - name: Rename current run with dispatch ID
        if: env.DISPATCH_ID != 'none'
        run: |
          echo "Renaming current run with DISPATCH_ID=${{ env.DISPATCH_ID }}"
          RUN_ID=$(gh run list --workflow="Playwright Test Runner" --limit 10 --json databaseId,headBranch,event | jq -r 'map(select(.event=="repository_dispatch" and .headBranch=="${{ env.CHECKOUT_REF }}")) | sort_by(.databaseId) | reverse | .[0].databaseId')
          echo "Resolved RUN_ID: $RUN_ID"
          if [ -n "$RUN_ID" ] && [ "$RUN_ID" != "null" ]; then
            curl -X PATCH \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ env.CURRENT_REPO }}/actions/runs/$RUN_ID" \
              -d "{\"name\":\"Playwright Test Runner (${{ env.DISPATCH_ID }})\"}"
          else
            echo "‚ö†Ô∏è Could not resolve run ID for renaming"
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install dependencies and Playwright
        run: |
          npm ci
          npx playwright install
          curl -sfS https://dotenvx.sh/install.sh | sh

      - name: Build Playwright grep expression
        id: build_grep
        run: |
          # Application, Scope, Type
          INCLUDE=()
          [ -n "${{ github.event.inputs.application }}" ] && INCLUDE+=("@${{ github.event.inputs.application }}")
          [ -n "${{ github.event.inputs.test_scope }}" ] && INCLUDE+=("@${{ github.event.inputs.test_scope }}")
          if [ "${{ github.event.inputs.test_type }}" != "ALL" ]; then
            INCLUDE+=("@${{ github.event.inputs.test_type }}")
          fi

          # Include tags
          if [ -n "${{ github.event.inputs.include_tags }}" ]; then
            IFS=',' read -ra TAGS <<< "${{ github.event.inputs.include_tags }}"
            for tag in "${TAGS[@]}"; do
              tag=$(echo "$tag" | xargs) # trim
              [ -n "$tag" ] && INCLUDE+=("$tag")
            done
          fi

          # Build include grep
          GREP_INCLUDE=""
          for tag in "${INCLUDE[@]}"; do
            GREP_INCLUDE="$GREP_INCLUDE(?=.*$tag)"
          done

          # Exclude tags
          GREP_EXCLUDE=""
          if [ -n "${{ github.event.inputs.exclude_tags }}" ]; then
            IFS=',' read -ra EXCLUDE <<< "${{ github.event.inputs.exclude_tags }}"
            for tag in "${EXCLUDE[@]}"; do
              tag=$(echo "$tag" | xargs)
              [ -n "$tag" ] && GREP_EXCLUDE="$GREP_EXCLUDE(?!.*$tag)"
            done
          fi

          # Final grep
          FINAL_GREP="$GREP_INCLUDE$GREP_EXCLUDE"
          echo "grep=$FINAL_GREP" >> $GITHUB_OUTPUT

      - name: Run Playwright Tests
        env:
          env: ${{ github.event.inputs.env }}
        run: |
          if [ -n "${{ steps.build_grep.outputs.grep }}" ]; then
            npx dotenvx run -- npx playwright test --grep '${{ steps.build_grep.outputs.grep }}'
          else
            echo "No grep expression built!"
            exit 1
          fi

      - name: Execution Context Summary
        run: |
          echo "### üîç Trigger Context" >> $GITHUB_STEP_SUMMARY
          echo "- Event: \`${{ github.event_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Run ID: [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_number }})" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "- Triggered manually" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            echo "- Commit: [${{ github.sha }}](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "- PR: [#${{ github.event.number }}](${{ github.server_url }}/${{ github.repository }}/pull/${{ github.event.number }})" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            echo "- External Dispatch ID: \`${{ env.DISPATCH_ID }}\`" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Checkout gh-pages branch
        if: always()
        uses: actions/checkout@v4
        with:
          repository: ${{ env.CURRENT_REPO }}
          ref: gh-pages
          path: gh-pages
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true

      - name: Prepare Allure Report
        if: always()
        run: |
          set -e
          echo "Preparing Allure Report..."

          LATEST_RUN=$(ls -d gh-pages/${{ env.APPLICATION }}/${{ env.ENV }}/${{ env.TEST_SCOPE }}/*/ 2>/dev/null | sort -V | tail -n 1)
          echo "Latest run found: $LATEST_RUN"

          mkdir -p "gh-pages/${{ env.APPLICATION }}/${{ env.ENV }}/${{ env.TEST_SCOPE }}/${{ env.UNIQUE_RUN_ID }}"

          mkdir -p "allure-results"
          if [ -n "$LATEST_RUN" ]; then
            if [ -d "$LATEST_RUN/history" ]; then
              echo "Copying history from $LATEST_RUN"
              cp -rv "$LATEST_RUN/history" "allure-results/"
            else
              echo "No history directory found in $LATEST_RUN"
            fi
          fi

      - name: Add Allure Executor Info
        run: |
          mkdir -p allure-results
          cat <<EOF > allure-results/executor.json
          {
            "name": "GitHub Actions",
            "type": "github",
            "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
            "buildOrder": "${{ github.run_number }}",
            "buildName": "Playwright Test Run [${{ env.APPLICATION }} | ${{ env.ENV }} | ${{ env.TEST_SCOPE }}] #${{ env.UNIQUE_RUN_ID }}",
            "buildUrl": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
            "reportUrl": "https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/${{ env.APPLICATION }}/${{ env.ENV }}/${{ env.TEST_SCOPE }}/${{ env.UNIQUE_RUN_ID }}/",
            "executor": "GitHub Actions"
          }
          EOF

      - name: Add Allure Environment Info
        run: |
          LATEST_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/${{ env.APPLICATION }}/${{ env.ENV }}/${{ env.TEST_SCOPE }}/latest/"
          echo "Application: ${{ env.APPLICATION }}" > allure-results/environment.properties
          echo "Env: ${{ env.ENV }}" > allure-results/environment.properties
          echo "Test_Scope: ${{ env.TEST_SCOPE }}" >> allure-results/environment.properties
          echo "Latest_Report_URL: $LATEST_URL" >> allure-results/environment.properties

      - name: Generate Allure report
        run: |
          REPORT_NAME="${{ env.APPLICATION }}-[${{ env.ENV }}-${{ env.TEST_SCOPE }}]-${{ env.UNIQUE_RUN_ID }}"
          echo "Report name will be: $REPORT_NAME"
          npm run allure:generate -- \
            --report-name "$REPORT_NAME" \
            --output "gh-pages/${{ env.APPLICATION }}/${{ env.ENV }}/${{ env.TEST_SCOPE }}/${{ env.UNIQUE_RUN_ID }}" || {
            echo "Failed to generate Allure report"
            exit 1
          }
          echo "Allure report generated successfully"

      - name: Debug gh-pages content
        run: |
          echo "Contents of gh-pages after generation:"
          find gh-pages -maxdepth 5 | sed 's/^/  /'
          ls -ld gh-pages/${{ env.APPLICATION }}/${{ env.ENV }}/${{ env.TEST_SCOPE }}/*
          echo "LATEST_RUN: $LATEST_RUN"

      - name: Set up git credentials
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git remote set-url origin https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ env.CURRENT_REPO }}.git

      - name: Commit and Push Allure Report
        if: always()
        run: |
          set -e
          cd gh-pages

          update_latest() {
            local path=$1
            echo "Updating latest report content for $path"

            local latest_run_dir="${UNIQUE_RUN_ID}"
            local source_dir="$path/$latest_run_dir"
            local target_dir="$path/latest"

            if [ ! -d "$source_dir" ]; then
              echo "Source directory $source_dir does not exist. Skipping."
              return 0
            fi

            rm -rf "$target_dir" || true
            mkdir -p "$target_dir"
            shopt -s nullglob
            files=("$source_dir/"*)
            if [ ${#files[@]} -gt 0 ]; then
              cp -a "$source_dir/"* "$target_dir/"
              echo "Updated $path/latest from $source_dir"
            else
              echo "No files to copy from $source_dir"
            fi
            shopt -u nullglob
          }

          generate_history_index() {
            # No-op: history.md generation removed as per user request
            return 0
          }

      - name: Update latest folder
        run: |
          set -e
          cd gh-pages
          path="${{ env.APPLICATION }}/${{ env.ENV }}/${{ env.TEST_SCOPE }}"
          latest_run_dir="${{ env.UNIQUE_RUN_ID }}"
          source_dir="$path/$latest_run_dir"
          target_dir="$path/latest"
          
          if [ ! -d "$source_dir" ]; then
            echo "Source directory $source_dir does not exist. Skipping."
            exit 0
          fi
      
          rm -rf "$target_dir" || true
          mkdir -p "$target_dir"
          shopt -s nullglob
          files=("$source_dir/"*)
          if [ ${#files[@]} -gt 0 ]; then
            cp -a "$source_dir/"* "$target_dir/"
            echo "Updated $path/latest from $source_dir"
          else
            echo "No files to copy from $source_dir"
          fi
          shopt -u nullglob

            git add .
            git commit -m "Update Allure Report for ${{ env.APPLICATION }} ${{ env.ENV }} ${{ env.TEST_SCOPE }} #${{ env.UNIQUE_RUN_ID }}" || echo "Nothing to commit"
            git pull --rebase origin gh-pages || true
            git push origin gh-pages

      - name: Fail job if tests failed
        if: steps.run_tests.outputs.test_status == 'failure'
        run: |
          echo "Tests failed, marking job as failed"
          exit 1

      - name: Patch Allure Report Title
        run: |
          SUMMARY_FILE="gh-pages/${{ env.APPLICATION }}/${{ env.ENV }}/${{ env.TEST_SCOPE }}/${{ env.UNIQUE_RUN_ID }}/widgets/summary.json"
          TITLE="Playwright Test Run [${{ env.APPLICATION }} | ${{ env.ENV }} | ${{ env.TEST_SCOPE }}] #${{ env.UNIQUE_RUN_ID }}"
          if [ -f "$SUMMARY_FILE" ]; then
            jq --arg title "$TITLE" '.reportName = $title' "$SUMMARY_FILE" > tmp.$$.json && mv tmp.$$.json "$SUMMARY_FILE"
          fi

  deploy:
    name: Deploy Allure Report to GitHub Pages
    runs-on: ubuntu-latest
    needs: run-and-publish
    if: ${{ always() }}

    concurrency:
      group: github-pages-deployment
      cancel-in-progress: false

    permissions:
      contents: write
      pages: write
      id-token: write

    env:
      APPLICATION: ${{ needs.run-and-publish.outputs.application }}
      ENV: ${{ github.event.inputs.env || github.event.client_payload.env || 'uat' }}
      TEST_SCOPE: ${{ needs.run-and-publish.outputs.test_scope }}
      UNIQUE_RUN_ID: ${{ needs.run-and-publish.outputs.run_number }}
      GITHUB_ORG: ${{ github.repository_owner }}
      GITHUB_REPO: ${{ github.event.repository.name }}
      TEST_STATUS: ${{ needs.run-and-publish.outputs.test_status }}

    outputs:
      report_url: ${{ steps.set_output.outputs.report_url }}
      test_status: ${{ needs.run-and-publish.outputs.test_status }}

    steps:
      - name: Checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          repository: ${{ env.GITHUB_ORG }}/${{ env.GITHUB_REPO }}
          ref: gh-pages
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build site folder
        run: |
          mkdir -p site
          for application in $(ls -d */ | sed 's#/##' | grep -v '^site$'); do
            for env in $(ls -d "$application"/*/ 2>/dev/null | sed 's#.*/##'); do
              if [ -d "$application/$env" ]; then
                echo "Copying $application/$env directory to site/"
                mkdir -p "site/$application"
                cp -a "$application/$env" "site/$application/"
              else
                echo "‚Ä∫ No $application/$env folder yet, skipping"
              fi
            done
          done

      - name: Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: site/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Post deployment link
        run: |
          REPORT_URL="https://${{ env.GITHUB_ORG }}.github.io/${{ env.GITHUB_REPO }}/${{ env.APPLICATION }}/${{ env.ENV }}/${{ env.TEST_SCOPE }}/${{ env.UNIQUE_RUN_ID }}/"
          echo "‚úÖ Report available at: ${REPORT_URL}"

      - name: Set output for report URL
        id: set_output
        run: |
          echo "report_url=https://${{ env.GITHUB_ORG }}.github.io/${{ env.GITHUB_REPO }}/${{ env.APPLICATION }}/${{ env.ENV }}/${{ env.TEST_SCOPE }}/${{ env.UNIQUE_RUN_ID }}/" >> $GITHUB_OUTPUT

      - name: Create deployment summary
        run: |
          REPORT_URL="https://${{ env.GITHUB_ORG }}.github.io/${{ env.GITHUB_REPO }}/${{ env.APPLICATION }}/${{ env.ENV }}/${{ env.TEST_SCOPE }}/${{ env.UNIQUE_RUN_ID }}/"
          echo "### üöÄ Allure Report Deployed!" >> $GITHUB_STEP_SUMMARY
          echo "- [View Report](${REPORT_URL})" >> $GITHUB_STEP_SUMMARY

      - name: Sleep 30 seconds
        run: sleep 30

