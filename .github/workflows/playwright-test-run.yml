name: Playwright Test Runner

on:
  workflow_call:
    inputs:
      run_branch:
        description: 'Branch to run tests on'
        required: true
        type: string
        default: 'main'
      test_scope:
        description: 'Test scope to run'
        required: true
        type: string
        default: 'regression'
    secrets:
      ADMIN_USERNAME:
        required: true
      ADMIN_PASSWORD:
        required: true
      WORKFLOW_TOKEN:
        required: true

  workflow_dispatch:
    inputs:
      test_scope:
        description: 'Select test scope'
        type: choice
        required: false
        default: 'regression'
        options:
          - smoke
          - regression

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  run-and-publish:
    runs-on: ubuntu-latest
    outputs:
      test_scope: ${{ env.TEST_SCOPE }}
      run_number: ${{ env.RUN_NUMBER }}

    env:
      TEST_SCOPE: ${{ inputs.test_scope || github.event.inputs.test_scope || 'regression' }}
      CHECKOUT_REF: ${{ inputs.run_branch || github.event.inputs.run_branch || 'main' }}
      RUN_NUMBER: ${{ github.run_number }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true
          ref: ${{ env.CHECKOUT_REF }}

      - name: Setup Node.js & Tools
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies & Playwright
        run: |
          npm ci
          npx playwright install

      - name: Run Playwright tests (${{ env.TEST_SCOPE }})
        env:
          ADMIN_USERNAME: ${{ secrets.ADMIN_USERNAME }}
          ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
        run: npm run test:${{ env.TEST_SCOPE }}

      - name: Checkout gh-pages branch
        if: always()
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages
          fetch-depth: 0
          persist-credentials: true
        continue-on-error: true
      
      - name: Prepare Allure Report
        if: always()
        run: |
          set -e  # Exit on error
          echo "Preparing Allure Report..."
          
          # Debug: Show current directory and contents
          echo "Current directory: $(pwd)"
          echo "Contents of gh-pages:"
          ls -la gh-pages || true
          
          # Create directory structure for the current run
          mkdir -p "gh-pages/${{ env.TEST_SCOPE }}/${{ env.RUN_NUMBER }}"
          
          # Create history directory for the current run
          mkdir -p "gh-pages/${{ env.TEST_SCOPE }}/${{ env.RUN_NUMBER }}/history"
          
          # Find the latest run for the current test scope
          LATEST_RUN=$(ls -d gh-pages/${{ env.TEST_SCOPE }}/*/ 2>/dev/null | sort -V | tail -n 1)
          echo "Latest run found: $LATEST_RUN"
          
          if [ -n "$LATEST_RUN" ]; then
            echo "Copying history from latest run: $LATEST_RUN"
            if [ -d "$LATEST_RUN/history" ]; then
              echo "Contents of latest run history:"
              ls -la "$LATEST_RUN/history" || true
              cp -r "$LATEST_RUN/history/"* "gh-pages/${{ env.TEST_SCOPE }}/${{ env.RUN_NUMBER }}/history/" || {
                echo "Failed to copy history files"
                exit 1
              }
            else
              echo "Warning: No history directory found in latest run"
            fi
          else
            echo "No previous runs found for ${{ env.TEST_SCOPE }} scope"
          fi
      
          # Generate report for the current run
          echo "Generating Allure report..."
          npm run allure:generate -- --output "gh-pages/${{ env.TEST_SCOPE }}/${{ env.RUN_NUMBER }}" || {
            echo "Failed to generate Allure report"
            exit 1
          }

      - name: Update latest report symlinks
        if: always()
        run: |
          set -e  # Exit on error
          # Function to update latest report symlink
          update_latest() {
            local scope=$1
            echo "Updating latest symlink for $scope"
            local latest_run=$(ls -d gh-pages/$scope/*/ 2>/dev/null | sort -V | tail -n 1)
            
            if [ -n "$latest_run" ]; then
              echo "Found latest run: $latest_run"
              # Remove existing symlink if it exists
              rm -rf "gh-pages/$scope/latest" || true
              # Create new symlink to latest report
              ln -s "$(basename $latest_run)" "gh-pages/$scope/latest" || {
                echo "Failed to create symlink"
                exit 1
              }
            else
              echo "No runs found for $scope"
            fi
          }

          # Update symlinks for both scopes
          update_latest "regression"
          update_latest "smoke"

      - name: Commit and Push Allure Report to gh-pages branch
        if: always()
        run: |
          set -e  # Exit on error
          cd gh-pages
          
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          git checkout -B gh-pages
          
          echo "Current git status:"
          git status
          
          git add .
          git commit -m "Update Allure Report for ${{ env.TEST_SCOPE }} scope run #${{ env.RUN_NUMBER }}" || {
            echo "No changes to commit"
            exit 0
          }
          
          echo "Pushing changes to gh-pages branch..."
          git push origin gh-pages || {
            echo "Failed to push changes"
            exit 1
          }

  deploy:
    runs-on: ubuntu-latest
    needs: run-and-publish

    concurrency:
      group: "github-pages-deployment"
      cancel-in-progress: false

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          fetch-depth: 0

      - name: Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: .

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4